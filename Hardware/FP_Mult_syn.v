// megafunction wizard: %ALTFP_MULT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALTFP_MULT 

// ============================================================
// File Name: FP_Mult.v
// Megafunction Name(s):
// 			ALTFP_MULT
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 15.0.0 Build 145 04/22/2015 Patches 0.01we SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, the Altera Quartus II License Agreement,
//the Altera MegaCore Function License Agreement, or other 
//applicable license agreement, including, without limitation, 
//that your use is for the sole purpose of programming logic 
//devices manufactured by Altera and sold by Altera or its 
//authorized distributors.  Please refer to the applicable 
//agreement for further details.


//altfp_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DENORMAL_SUPPORT="NO" DEVICE_FAMILY="Cyclone IV GX" EXCEPTION_HANDLING="NO" PIPELINE=5 REDUCED_FUNCTIONALITY="NO" ROUNDING="TO_NEAREST" WIDTH_EXP=8 WIDTH_MAN=23 aclr clock dataa datab result
//VERSION_BEGIN 15.0 cbx_alt_ded_mult_y 2015:04:22:18:04:07:SJ cbx_altbarrel_shift 2015:04:22:18:04:07:SJ cbx_altera_mult_add 2015:04:22:18:04:07:SJ cbx_altera_mult_add_rtl 2015:04:22:18:04:07:SJ cbx_altfp_mult 2015:04:22:18:04:07:SJ cbx_altmult_add 2015:04:22:18:04:07:SJ cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_lpm_compare 2015:04:22:18:04:07:SJ cbx_lpm_mult 2015:04:22:18:04:08:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_padd 2015:04:22:18:04:08:SJ cbx_parallel_add 2015:04:22:18:04:08:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ cbx_util_mgl 2015:04:22:18:04:08:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//lpm_add_sub DEVICE_FAMILY="Cyclone IV GX" LPM_PIPELINE=1 LPM_WIDTH=9 aclr cin clken clock dataa datab result
//VERSION_BEGIN 15.0 cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV GX" LPM_WIDTH=10 cin dataa datab result
//VERSION_BEGIN 15.0 cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV GX" LPM_DIRECTION="SUB" LPM_PIPELINE=0 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=10 dataa datab result
//VERSION_BEGIN 15.0 cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV GX" LPM_PIPELINE=0 LPM_WIDTH=25 dataa datab result
//VERSION_BEGIN 15.0 cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ  VERSION_END


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone IV GX" LPM_PIPELINE=2 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=24 LPM_WIDTHB=24 LPM_WIDTHP=48 LPM_WIDTHS=1 aclr clken clock dataa datab result
//VERSION_BEGIN 15.0 cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_lpm_mult 2015:04:22:18:04:08:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_padd 2015:04:22:18:04:08:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ cbx_util_mgl 2015:04:22:18:04:08:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone IV GX" WIDTH=25 dataa datab result
//VERSION_BEGIN 15.0 cbx_mgl 2015:04:22:18:06:50:SJ cbx_stratixii 2015:04:22:18:04:08:SJ cbx_util_mgl 2015:04:22:18:04:08:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone IV GX" WIDTH=31 dataa datab result
//VERSION_BEGIN 15.0 cbx_mgl 2015:04:22:18:06:50:SJ cbx_stratixii 2015:04:22:18:04:08:SJ cbx_util_mgl 2015:04:22:18:04:08:SJ  VERSION_END

//synthesis_resources = dsp_9bit 7 lut 56 reg 73 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  FP_Mult_mult
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [23:0]  dataa;
	input   [23:0]  datab;
	output   [47:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[24:0]	wire_add82_result;
	wire	[30:0]	wire_add86_result;
	wire  [35:0]   wire_mac_mult1_dataout;
	wire  [23:0]   wire_mac_mult3_dataout;
	wire  [23:0]   wire_mac_mult5_dataout;
	wire  [11:0]   wire_mac_mult7_dataout;
	wire  [35:0]   wire_mac_out2_dataout;
	wire  [23:0]   wire_mac_out4_dataout;
	wire  [23:0]   wire_mac_out6_dataout;
	wire  [11:0]   wire_mac_out8_dataout;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe10;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe11;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe12;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe13;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe14;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe15;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe16;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe17;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe18;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe19;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe20;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe21;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe22;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe23;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe24;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe25;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe26;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe27;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe28;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe29;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe30;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe31;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe32;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe33;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe34;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe35;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe36;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe37;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe38;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe39;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe40;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe41;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe42;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe43;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe44;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe45;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe46;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe47;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe48;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe49;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe50;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe51;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe52;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe53;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe54;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe55;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe56;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe57;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe58;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe59;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe60;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe61;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe62;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe63;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe64;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe65;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe66;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe67;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe68;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe69;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe70;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe71;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe72;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe73;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe74;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe75;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe76;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe77;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe78;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe79;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe80;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe81;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe9;
	wire  [24:0]   wire_sft83a_in;
	wire  [24:0]   wire_sft83a_out;
	wire  [24:0]   wire_sft84a_in;
	wire  [24:0]   wire_sft84a_out;
	wire  [24:0]   wire_sft85a_in;
	wire  [24:0]   wire_sft85a_out;
	wire  [30:0]   wire_sft87a_in;
	wire  [30:0]   wire_sft87a_out;
	wire  [30:0]   wire_sft88a_in;
	wire  [30:0]   wire_sft88a_out;
	wire  [30:0]   wire_sft89a_in;
	wire  [30:0]   wire_sft89a_out;
	wire  w687w;
	wire  [48:0]  w854w;

	assign
		wire_add82_result = wire_sft83a_out + wire_sft84a_out;
	assign
		wire_add86_result = wire_sft87a_out + wire_sft88a_out;
	cycloneiv_mac_mult   mac_mult1
	( 
	.dataa({dataa[17:0]}),
	.datab({datab[17:0]}),
	.dataout(wire_mac_mult1_dataout),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult1.dataa_clock = "none",
		mac_mult1.dataa_width = 18,
		mac_mult1.datab_clock = "none",
		mac_mult1.datab_width = 18,
		mac_mult1.signa_clock = "none",
		mac_mult1.signb_clock = "none",
		mac_mult1.lpm_type = "cycloneiv_mac_mult";
	cycloneiv_mac_mult   mac_mult3
	( 
	.dataa({dataa[17:0]}),
	.datab({datab[23:18]}),
	.dataout(wire_mac_mult3_dataout),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult3.dataa_clock = "none",
		mac_mult3.dataa_width = 18,
		mac_mult3.datab_clock = "none",
		mac_mult3.datab_width = 6,
		mac_mult3.signa_clock = "none",
		mac_mult3.signb_clock = "none",
		mac_mult3.lpm_type = "cycloneiv_mac_mult";
	cycloneiv_mac_mult   mac_mult5
	( 
	.dataa({dataa[23:18]}),
	.datab({datab[17:0]}),
	.dataout(wire_mac_mult5_dataout),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult5.dataa_clock = "none",
		mac_mult5.dataa_width = 6,
		mac_mult5.datab_clock = "none",
		mac_mult5.datab_width = 18,
		mac_mult5.signa_clock = "none",
		mac_mult5.signb_clock = "none",
		mac_mult5.lpm_type = "cycloneiv_mac_mult";
	cycloneiv_mac_mult   mac_mult7
	( 
	.dataa({dataa[23:18]}),
	.datab({datab[23:18]}),
	.dataout(wire_mac_mult7_dataout),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult7.dataa_clock = "none",
		mac_mult7.dataa_width = 6,
		mac_mult7.datab_clock = "none",
		mac_mult7.datab_width = 6,
		mac_mult7.signa_clock = "none",
		mac_mult7.signb_clock = "none",
		mac_mult7.lpm_type = "cycloneiv_mac_mult";
	cycloneiv_mac_out   mac_out2
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult1_dataout),
	.dataout(wire_mac_out2_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out2.dataa_width = 36,
		mac_out2.output_clock = "0",
		mac_out2.lpm_type = "cycloneiv_mac_out";
	cycloneiv_mac_out   mac_out4
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult3_dataout),
	.dataout(wire_mac_out4_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out4.dataa_width = 24,
		mac_out4.output_clock = "0",
		mac_out4.lpm_type = "cycloneiv_mac_out";
	cycloneiv_mac_out   mac_out6
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult5_dataout),
	.dataout(wire_mac_out6_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out6.dataa_width = 24,
		mac_out6.output_clock = "0",
		mac_out6.lpm_type = "cycloneiv_mac_out";
	cycloneiv_mac_out   mac_out8
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult7_dataout),
	.dataout(wire_mac_out8_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out8.dataa_width = 12,
		mac_out8.output_clock = "0",
		mac_out8.lpm_type = "cycloneiv_mac_out";
	// synopsys translate_off
	initial
		dffe10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe10 <= 1'b0;
		else if  (clken == 1'b1)   dffe10 <= wire_mac_out2_dataout[1];
	// synopsys translate_off
	initial
		dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe11 <= 1'b0;
		else if  (clken == 1'b1)   dffe11 <= wire_mac_out2_dataout[2];
	// synopsys translate_off
	initial
		dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe12 <= 1'b0;
		else if  (clken == 1'b1)   dffe12 <= wire_mac_out2_dataout[3];
	// synopsys translate_off
	initial
		dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe13 <= 1'b0;
		else if  (clken == 1'b1)   dffe13 <= wire_mac_out2_dataout[4];
	// synopsys translate_off
	initial
		dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe14 <= 1'b0;
		else if  (clken == 1'b1)   dffe14 <= wire_mac_out2_dataout[5];
	// synopsys translate_off
	initial
		dffe15 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe15 <= 1'b0;
		else if  (clken == 1'b1)   dffe15 <= wire_mac_out2_dataout[6];
	// synopsys translate_off
	initial
		dffe16 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe16 <= 1'b0;
		else if  (clken == 1'b1)   dffe16 <= wire_mac_out2_dataout[7];
	// synopsys translate_off
	initial
		dffe17 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe17 <= 1'b0;
		else if  (clken == 1'b1)   dffe17 <= wire_mac_out2_dataout[8];
	// synopsys translate_off
	initial
		dffe18 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe18 <= 1'b0;
		else if  (clken == 1'b1)   dffe18 <= wire_mac_out2_dataout[9];
	// synopsys translate_off
	initial
		dffe19 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe19 <= 1'b0;
		else if  (clken == 1'b1)   dffe19 <= wire_mac_out2_dataout[10];
	// synopsys translate_off
	initial
		dffe20 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe20 <= 1'b0;
		else if  (clken == 1'b1)   dffe20 <= wire_mac_out2_dataout[11];
	// synopsys translate_off
	initial
		dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe21 <= 1'b0;
		else if  (clken == 1'b1)   dffe21 <= wire_mac_out2_dataout[12];
	// synopsys translate_off
	initial
		dffe22 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe22 <= 1'b0;
		else if  (clken == 1'b1)   dffe22 <= wire_mac_out2_dataout[13];
	// synopsys translate_off
	initial
		dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe23 <= 1'b0;
		else if  (clken == 1'b1)   dffe23 <= wire_mac_out2_dataout[14];
	// synopsys translate_off
	initial
		dffe24 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe24 <= 1'b0;
		else if  (clken == 1'b1)   dffe24 <= wire_mac_out2_dataout[15];
	// synopsys translate_off
	initial
		dffe25 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe25 <= 1'b0;
		else if  (clken == 1'b1)   dffe25 <= wire_mac_out2_dataout[16];
	// synopsys translate_off
	initial
		dffe26 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe26 <= 1'b0;
		else if  (clken == 1'b1)   dffe26 <= wire_mac_out2_dataout[17];
	// synopsys translate_off
	initial
		dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe27 <= 1'b0;
		else if  (clken == 1'b1)   dffe27 <= wire_mac_out2_dataout[18];
	// synopsys translate_off
	initial
		dffe28 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe28 <= 1'b0;
		else if  (clken == 1'b1)   dffe28 <= wire_sft85a_out[0];
	// synopsys translate_off
	initial
		dffe29 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe29 <= 1'b0;
		else if  (clken == 1'b1)   dffe29 <= wire_mac_out2_dataout[19];
	// synopsys translate_off
	initial
		dffe30 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe30 <= 1'b0;
		else if  (clken == 1'b1)   dffe30 <= wire_sft85a_out[1];
	// synopsys translate_off
	initial
		dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe31 <= 1'b0;
		else if  (clken == 1'b1)   dffe31 <= wire_mac_out2_dataout[20];
	// synopsys translate_off
	initial
		dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe32 <= 1'b0;
		else if  (clken == 1'b1)   dffe32 <= wire_sft85a_out[2];
	// synopsys translate_off
	initial
		dffe33 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe33 <= 1'b0;
		else if  (clken == 1'b1)   dffe33 <= wire_mac_out2_dataout[21];
	// synopsys translate_off
	initial
		dffe34 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe34 <= 1'b0;
		else if  (clken == 1'b1)   dffe34 <= wire_sft85a_out[3];
	// synopsys translate_off
	initial
		dffe35 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe35 <= 1'b0;
		else if  (clken == 1'b1)   dffe35 <= wire_mac_out2_dataout[22];
	// synopsys translate_off
	initial
		dffe36 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe36 <= 1'b0;
		else if  (clken == 1'b1)   dffe36 <= wire_sft85a_out[4];
	// synopsys translate_off
	initial
		dffe37 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe37 <= 1'b0;
		else if  (clken == 1'b1)   dffe37 <= wire_mac_out2_dataout[23];
	// synopsys translate_off
	initial
		dffe38 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe38 <= 1'b0;
		else if  (clken == 1'b1)   dffe38 <= wire_sft85a_out[5];
	// synopsys translate_off
	initial
		dffe39 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe39 <= 1'b0;
		else if  (clken == 1'b1)   dffe39 <= wire_mac_out2_dataout[24];
	// synopsys translate_off
	initial
		dffe40 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe40 <= 1'b0;
		else if  (clken == 1'b1)   dffe40 <= wire_sft85a_out[6];
	// synopsys translate_off
	initial
		dffe41 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe41 <= 1'b0;
		else if  (clken == 1'b1)   dffe41 <= wire_mac_out2_dataout[25];
	// synopsys translate_off
	initial
		dffe42 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe42 <= 1'b0;
		else if  (clken == 1'b1)   dffe42 <= wire_sft85a_out[7];
	// synopsys translate_off
	initial
		dffe43 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe43 <= 1'b0;
		else if  (clken == 1'b1)   dffe43 <= wire_mac_out2_dataout[26];
	// synopsys translate_off
	initial
		dffe44 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe44 <= 1'b0;
		else if  (clken == 1'b1)   dffe44 <= wire_sft85a_out[8];
	// synopsys translate_off
	initial
		dffe45 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe45 <= 1'b0;
		else if  (clken == 1'b1)   dffe45 <= wire_mac_out2_dataout[27];
	// synopsys translate_off
	initial
		dffe46 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe46 <= 1'b0;
		else if  (clken == 1'b1)   dffe46 <= wire_sft85a_out[9];
	// synopsys translate_off
	initial
		dffe47 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe47 <= 1'b0;
		else if  (clken == 1'b1)   dffe47 <= wire_mac_out2_dataout[28];
	// synopsys translate_off
	initial
		dffe48 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe48 <= 1'b0;
		else if  (clken == 1'b1)   dffe48 <= wire_sft85a_out[10];
	// synopsys translate_off
	initial
		dffe49 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe49 <= 1'b0;
		else if  (clken == 1'b1)   dffe49 <= wire_mac_out2_dataout[29];
	// synopsys translate_off
	initial
		dffe50 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe50 <= 1'b0;
		else if  (clken == 1'b1)   dffe50 <= wire_sft85a_out[11];
	// synopsys translate_off
	initial
		dffe51 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe51 <= 1'b0;
		else if  (clken == 1'b1)   dffe51 <= wire_mac_out2_dataout[30];
	// synopsys translate_off
	initial
		dffe52 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe52 <= 1'b0;
		else if  (clken == 1'b1)   dffe52 <= wire_sft85a_out[12];
	// synopsys translate_off
	initial
		dffe53 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe53 <= 1'b0;
		else if  (clken == 1'b1)   dffe53 <= wire_mac_out2_dataout[31];
	// synopsys translate_off
	initial
		dffe54 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe54 <= 1'b0;
		else if  (clken == 1'b1)   dffe54 <= wire_sft85a_out[13];
	// synopsys translate_off
	initial
		dffe55 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe55 <= 1'b0;
		else if  (clken == 1'b1)   dffe55 <= wire_mac_out2_dataout[32];
	// synopsys translate_off
	initial
		dffe56 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe56 <= 1'b0;
		else if  (clken == 1'b1)   dffe56 <= wire_sft85a_out[14];
	// synopsys translate_off
	initial
		dffe57 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe57 <= 1'b0;
		else if  (clken == 1'b1)   dffe57 <= wire_mac_out2_dataout[33];
	// synopsys translate_off
	initial
		dffe58 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe58 <= 1'b0;
		else if  (clken == 1'b1)   dffe58 <= wire_sft85a_out[15];
	// synopsys translate_off
	initial
		dffe59 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe59 <= 1'b0;
		else if  (clken == 1'b1)   dffe59 <= wire_mac_out2_dataout[34];
	// synopsys translate_off
	initial
		dffe60 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe60 <= 1'b0;
		else if  (clken == 1'b1)   dffe60 <= wire_sft85a_out[16];
	// synopsys translate_off
	initial
		dffe61 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe61 <= 1'b0;
		else if  (clken == 1'b1)   dffe61 <= wire_mac_out2_dataout[35];
	// synopsys translate_off
	initial
		dffe62 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe62 <= 1'b0;
		else if  (clken == 1'b1)   dffe62 <= wire_sft85a_out[17];
	// synopsys translate_off
	initial
		dffe63 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe63 <= 1'b0;
		else if  (clken == 1'b1)   dffe63 <= wire_mac_out4_dataout[18];
	// synopsys translate_off
	initial
		dffe64 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe64 <= 1'b0;
		else if  (clken == 1'b1)   dffe64 <= wire_sft85a_out[18];
	// synopsys translate_off
	initial
		dffe65 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe65 <= 1'b0;
		else if  (clken == 1'b1)   dffe65 <= wire_mac_out4_dataout[19];
	// synopsys translate_off
	initial
		dffe66 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe66 <= 1'b0;
		else if  (clken == 1'b1)   dffe66 <= wire_sft85a_out[19];
	// synopsys translate_off
	initial
		dffe67 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe67 <= 1'b0;
		else if  (clken == 1'b1)   dffe67 <= wire_mac_out4_dataout[20];
	// synopsys translate_off
	initial
		dffe68 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe68 <= 1'b0;
		else if  (clken == 1'b1)   dffe68 <= wire_sft85a_out[20];
	// synopsys translate_off
	initial
		dffe69 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe69 <= 1'b0;
		else if  (clken == 1'b1)   dffe69 <= wire_mac_out4_dataout[21];
	// synopsys translate_off
	initial
		dffe70 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe70 <= 1'b0;
		else if  (clken == 1'b1)   dffe70 <= wire_sft85a_out[21];
	// synopsys translate_off
	initial
		dffe71 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe71 <= 1'b0;
		else if  (clken == 1'b1)   dffe71 <= wire_mac_out4_dataout[22];
	// synopsys translate_off
	initial
		dffe72 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe72 <= 1'b0;
		else if  (clken == 1'b1)   dffe72 <= wire_sft85a_out[22];
	// synopsys translate_off
	initial
		dffe73 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe73 <= 1'b0;
		else if  (clken == 1'b1)   dffe73 <= wire_mac_out4_dataout[23];
	// synopsys translate_off
	initial
		dffe74 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe74 <= 1'b0;
		else if  (clken == 1'b1)   dffe74 <= wire_sft85a_out[23];
	// synopsys translate_off
	initial
		dffe75 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe75 <= 1'b0;
		else if  (clken == 1'b1)   dffe75 <= wire_mac_out8_dataout[6];
	// synopsys translate_off
	initial
		dffe76 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe76 <= 1'b0;
		else if  (clken == 1'b1)   dffe76 <= wire_sft85a_out[24];
	// synopsys translate_off
	initial
		dffe77 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe77 <= 1'b0;
		else if  (clken == 1'b1)   dffe77 <= wire_mac_out8_dataout[7];
	// synopsys translate_off
	initial
		dffe78 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe78 <= 1'b0;
		else if  (clken == 1'b1)   dffe78 <= wire_mac_out8_dataout[8];
	// synopsys translate_off
	initial
		dffe79 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe79 <= 1'b0;
		else if  (clken == 1'b1)   dffe79 <= wire_mac_out8_dataout[9];
	// synopsys translate_off
	initial
		dffe80 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe80 <= 1'b0;
		else if  (clken == 1'b1)   dffe80 <= wire_mac_out8_dataout[10];
	// synopsys translate_off
	initial
		dffe81 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe81 <= 1'b0;
		else if  (clken == 1'b1)   dffe81 <= wire_mac_out8_dataout[11];
	// synopsys translate_off
	initial
		dffe9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe9 <= 1'b0;
		else if  (clken == 1'b1)   dffe9 <= wire_mac_out2_dataout[0];
	soft   sft83a_0
	( 
	.in(wire_sft83a_in[0:0]),
	.out(wire_sft83a_out[0:0]));
	soft   sft83a_1
	( 
	.in(wire_sft83a_in[1:1]),
	.out(wire_sft83a_out[1:1]));
	soft   sft83a_2
	( 
	.in(wire_sft83a_in[2:2]),
	.out(wire_sft83a_out[2:2]));
	soft   sft83a_3
	( 
	.in(wire_sft83a_in[3:3]),
	.out(wire_sft83a_out[3:3]));
	soft   sft83a_4
	( 
	.in(wire_sft83a_in[4:4]),
	.out(wire_sft83a_out[4:4]));
	soft   sft83a_5
	( 
	.in(wire_sft83a_in[5:5]),
	.out(wire_sft83a_out[5:5]));
	soft   sft83a_6
	( 
	.in(wire_sft83a_in[6:6]),
	.out(wire_sft83a_out[6:6]));
	soft   sft83a_7
	( 
	.in(wire_sft83a_in[7:7]),
	.out(wire_sft83a_out[7:7]));
	soft   sft83a_8
	( 
	.in(wire_sft83a_in[8:8]),
	.out(wire_sft83a_out[8:8]));
	soft   sft83a_9
	( 
	.in(wire_sft83a_in[9:9]),
	.out(wire_sft83a_out[9:9]));
	soft   sft83a_10
	( 
	.in(wire_sft83a_in[10:10]),
	.out(wire_sft83a_out[10:10]));
	soft   sft83a_11
	( 
	.in(wire_sft83a_in[11:11]),
	.out(wire_sft83a_out[11:11]));
	soft   sft83a_12
	( 
	.in(wire_sft83a_in[12:12]),
	.out(wire_sft83a_out[12:12]));
	soft   sft83a_13
	( 
	.in(wire_sft83a_in[13:13]),
	.out(wire_sft83a_out[13:13]));
	soft   sft83a_14
	( 
	.in(wire_sft83a_in[14:14]),
	.out(wire_sft83a_out[14:14]));
	soft   sft83a_15
	( 
	.in(wire_sft83a_in[15:15]),
	.out(wire_sft83a_out[15:15]));
	soft   sft83a_16
	( 
	.in(wire_sft83a_in[16:16]),
	.out(wire_sft83a_out[16:16]));
	soft   sft83a_17
	( 
	.in(wire_sft83a_in[17:17]),
	.out(wire_sft83a_out[17:17]));
	soft   sft83a_18
	( 
	.in(wire_sft83a_in[18:18]),
	.out(wire_sft83a_out[18:18]));
	soft   sft83a_19
	( 
	.in(wire_sft83a_in[19:19]),
	.out(wire_sft83a_out[19:19]));
	soft   sft83a_20
	( 
	.in(wire_sft83a_in[20:20]),
	.out(wire_sft83a_out[20:20]));
	soft   sft83a_21
	( 
	.in(wire_sft83a_in[21:21]),
	.out(wire_sft83a_out[21:21]));
	soft   sft83a_22
	( 
	.in(wire_sft83a_in[22:22]),
	.out(wire_sft83a_out[22:22]));
	soft   sft83a_23
	( 
	.in(wire_sft83a_in[23:23]),
	.out(wire_sft83a_out[23:23]));
	soft   sft83a_24
	( 
	.in(wire_sft83a_in[24:24]),
	.out(wire_sft83a_out[24:24]));
	assign
		wire_sft83a_in = {w687w, {wire_mac_out8_dataout[5], {wire_mac_out8_dataout[4], {wire_mac_out8_dataout[3], {wire_mac_out8_dataout[2], {wire_mac_out8_dataout[1], {wire_mac_out8_dataout[0], {wire_mac_out6_dataout[17], {wire_mac_out6_dataout[16], {wire_mac_out6_dataout[15], {wire_mac_out6_dataout[14], {wire_mac_out6_dataout[13], {wire_mac_out6_dataout[12], {wire_mac_out6_dataout[11], {wire_mac_out6_dataout[10], {wire_mac_out6_dataout[9], {wire_mac_out6_dataout[8], {wire_mac_out6_dataout[7], {wire_mac_out6_dataout[6], {wire_mac_out6_dataout[5], {wire_mac_out6_dataout[4], {wire_mac_out6_dataout[3], {wire_mac_out6_dataout[2], {wire_mac_out6_dataout[1:0]}}}}}}}}}}}}}}}}}}}}}}}};
	soft   sft84a_0
	( 
	.in(wire_sft84a_in[0:0]),
	.out(wire_sft84a_out[0:0]));
	soft   sft84a_1
	( 
	.in(wire_sft84a_in[1:1]),
	.out(wire_sft84a_out[1:1]));
	soft   sft84a_2
	( 
	.in(wire_sft84a_in[2:2]),
	.out(wire_sft84a_out[2:2]));
	soft   sft84a_3
	( 
	.in(wire_sft84a_in[3:3]),
	.out(wire_sft84a_out[3:3]));
	soft   sft84a_4
	( 
	.in(wire_sft84a_in[4:4]),
	.out(wire_sft84a_out[4:4]));
	soft   sft84a_5
	( 
	.in(wire_sft84a_in[5:5]),
	.out(wire_sft84a_out[5:5]));
	soft   sft84a_6
	( 
	.in(wire_sft84a_in[6:6]),
	.out(wire_sft84a_out[6:6]));
	soft   sft84a_7
	( 
	.in(wire_sft84a_in[7:7]),
	.out(wire_sft84a_out[7:7]));
	soft   sft84a_8
	( 
	.in(wire_sft84a_in[8:8]),
	.out(wire_sft84a_out[8:8]));
	soft   sft84a_9
	( 
	.in(wire_sft84a_in[9:9]),
	.out(wire_sft84a_out[9:9]));
	soft   sft84a_10
	( 
	.in(wire_sft84a_in[10:10]),
	.out(wire_sft84a_out[10:10]));
	soft   sft84a_11
	( 
	.in(wire_sft84a_in[11:11]),
	.out(wire_sft84a_out[11:11]));
	soft   sft84a_12
	( 
	.in(wire_sft84a_in[12:12]),
	.out(wire_sft84a_out[12:12]));
	soft   sft84a_13
	( 
	.in(wire_sft84a_in[13:13]),
	.out(wire_sft84a_out[13:13]));
	soft   sft84a_14
	( 
	.in(wire_sft84a_in[14:14]),
	.out(wire_sft84a_out[14:14]));
	soft   sft84a_15
	( 
	.in(wire_sft84a_in[15:15]),
	.out(wire_sft84a_out[15:15]));
	soft   sft84a_16
	( 
	.in(wire_sft84a_in[16:16]),
	.out(wire_sft84a_out[16:16]));
	soft   sft84a_17
	( 
	.in(wire_sft84a_in[17:17]),
	.out(wire_sft84a_out[17:17]));
	soft   sft84a_18
	( 
	.in(wire_sft84a_in[18:18]),
	.out(wire_sft84a_out[18:18]));
	soft   sft84a_19
	( 
	.in(wire_sft84a_in[19:19]),
	.out(wire_sft84a_out[19:19]));
	soft   sft84a_20
	( 
	.in(wire_sft84a_in[20:20]),
	.out(wire_sft84a_out[20:20]));
	soft   sft84a_21
	( 
	.in(wire_sft84a_in[21:21]),
	.out(wire_sft84a_out[21:21]));
	soft   sft84a_22
	( 
	.in(wire_sft84a_in[22:22]),
	.out(wire_sft84a_out[22:22]));
	soft   sft84a_23
	( 
	.in(wire_sft84a_in[23:23]),
	.out(wire_sft84a_out[23:23]));
	soft   sft84a_24
	( 
	.in(wire_sft84a_in[24:24]),
	.out(wire_sft84a_out[24:24]));
	assign
		wire_sft84a_in = {w687w, {wire_mac_out6_dataout[23], {wire_mac_out6_dataout[22], {wire_mac_out6_dataout[21], {wire_mac_out6_dataout[20], {wire_mac_out6_dataout[19], {wire_mac_out6_dataout[18], {wire_mac_out4_dataout[17], {wire_mac_out4_dataout[16], {wire_mac_out4_dataout[15], {wire_mac_out4_dataout[14], {wire_mac_out4_dataout[13], {wire_mac_out4_dataout[12], {wire_mac_out4_dataout[11], {wire_mac_out4_dataout[10], {wire_mac_out4_dataout[9], {wire_mac_out4_dataout[8], {wire_mac_out4_dataout[7], {wire_mac_out4_dataout[6], {wire_mac_out4_dataout[5], {wire_mac_out4_dataout[4], {wire_mac_out4_dataout[3], {wire_mac_out4_dataout[2], {wire_mac_out4_dataout[1:0]}}}}}}}}}}}}}}}}}}}}}}}};
	soft   sft85a_0
	( 
	.in(wire_sft85a_in[0:0]),
	.out(wire_sft85a_out[0:0]));
	soft   sft85a_1
	( 
	.in(wire_sft85a_in[1:1]),
	.out(wire_sft85a_out[1:1]));
	soft   sft85a_2
	( 
	.in(wire_sft85a_in[2:2]),
	.out(wire_sft85a_out[2:2]));
	soft   sft85a_3
	( 
	.in(wire_sft85a_in[3:3]),
	.out(wire_sft85a_out[3:3]));
	soft   sft85a_4
	( 
	.in(wire_sft85a_in[4:4]),
	.out(wire_sft85a_out[4:4]));
	soft   sft85a_5
	( 
	.in(wire_sft85a_in[5:5]),
	.out(wire_sft85a_out[5:5]));
	soft   sft85a_6
	( 
	.in(wire_sft85a_in[6:6]),
	.out(wire_sft85a_out[6:6]));
	soft   sft85a_7
	( 
	.in(wire_sft85a_in[7:7]),
	.out(wire_sft85a_out[7:7]));
	soft   sft85a_8
	( 
	.in(wire_sft85a_in[8:8]),
	.out(wire_sft85a_out[8:8]));
	soft   sft85a_9
	( 
	.in(wire_sft85a_in[9:9]),
	.out(wire_sft85a_out[9:9]));
	soft   sft85a_10
	( 
	.in(wire_sft85a_in[10:10]),
	.out(wire_sft85a_out[10:10]));
	soft   sft85a_11
	( 
	.in(wire_sft85a_in[11:11]),
	.out(wire_sft85a_out[11:11]));
	soft   sft85a_12
	( 
	.in(wire_sft85a_in[12:12]),
	.out(wire_sft85a_out[12:12]));
	soft   sft85a_13
	( 
	.in(wire_sft85a_in[13:13]),
	.out(wire_sft85a_out[13:13]));
	soft   sft85a_14
	( 
	.in(wire_sft85a_in[14:14]),
	.out(wire_sft85a_out[14:14]));
	soft   sft85a_15
	( 
	.in(wire_sft85a_in[15:15]),
	.out(wire_sft85a_out[15:15]));
	soft   sft85a_16
	( 
	.in(wire_sft85a_in[16:16]),
	.out(wire_sft85a_out[16:16]));
	soft   sft85a_17
	( 
	.in(wire_sft85a_in[17:17]),
	.out(wire_sft85a_out[17:17]));
	soft   sft85a_18
	( 
	.in(wire_sft85a_in[18:18]),
	.out(wire_sft85a_out[18:18]));
	soft   sft85a_19
	( 
	.in(wire_sft85a_in[19:19]),
	.out(wire_sft85a_out[19:19]));
	soft   sft85a_20
	( 
	.in(wire_sft85a_in[20:20]),
	.out(wire_sft85a_out[20:20]));
	soft   sft85a_21
	( 
	.in(wire_sft85a_in[21:21]),
	.out(wire_sft85a_out[21:21]));
	soft   sft85a_22
	( 
	.in(wire_sft85a_in[22:22]),
	.out(wire_sft85a_out[22:22]));
	soft   sft85a_23
	( 
	.in(wire_sft85a_in[23:23]),
	.out(wire_sft85a_out[23:23]));
	soft   sft85a_24
	( 
	.in(wire_sft85a_in[24:24]),
	.out(wire_sft85a_out[24:24]));
	assign
		wire_sft85a_in = wire_add82_result;
	soft   sft87a_0
	( 
	.in(wire_sft87a_in[0:0]),
	.out(wire_sft87a_out[0:0]));
	soft   sft87a_1
	( 
	.in(wire_sft87a_in[1:1]),
	.out(wire_sft87a_out[1:1]));
	soft   sft87a_2
	( 
	.in(wire_sft87a_in[2:2]),
	.out(wire_sft87a_out[2:2]));
	soft   sft87a_3
	( 
	.in(wire_sft87a_in[3:3]),
	.out(wire_sft87a_out[3:3]));
	soft   sft87a_4
	( 
	.in(wire_sft87a_in[4:4]),
	.out(wire_sft87a_out[4:4]));
	soft   sft87a_5
	( 
	.in(wire_sft87a_in[5:5]),
	.out(wire_sft87a_out[5:5]));
	soft   sft87a_6
	( 
	.in(wire_sft87a_in[6:6]),
	.out(wire_sft87a_out[6:6]));
	soft   sft87a_7
	( 
	.in(wire_sft87a_in[7:7]),
	.out(wire_sft87a_out[7:7]));
	soft   sft87a_8
	( 
	.in(wire_sft87a_in[8:8]),
	.out(wire_sft87a_out[8:8]));
	soft   sft87a_9
	( 
	.in(wire_sft87a_in[9:9]),
	.out(wire_sft87a_out[9:9]));
	soft   sft87a_10
	( 
	.in(wire_sft87a_in[10:10]),
	.out(wire_sft87a_out[10:10]));
	soft   sft87a_11
	( 
	.in(wire_sft87a_in[11:11]),
	.out(wire_sft87a_out[11:11]));
	soft   sft87a_12
	( 
	.in(wire_sft87a_in[12:12]),
	.out(wire_sft87a_out[12:12]));
	soft   sft87a_13
	( 
	.in(wire_sft87a_in[13:13]),
	.out(wire_sft87a_out[13:13]));
	soft   sft87a_14
	( 
	.in(wire_sft87a_in[14:14]),
	.out(wire_sft87a_out[14:14]));
	soft   sft87a_15
	( 
	.in(wire_sft87a_in[15:15]),
	.out(wire_sft87a_out[15:15]));
	soft   sft87a_16
	( 
	.in(wire_sft87a_in[16:16]),
	.out(wire_sft87a_out[16:16]));
	soft   sft87a_17
	( 
	.in(wire_sft87a_in[17:17]),
	.out(wire_sft87a_out[17:17]));
	soft   sft87a_18
	( 
	.in(wire_sft87a_in[18:18]),
	.out(wire_sft87a_out[18:18]));
	soft   sft87a_19
	( 
	.in(wire_sft87a_in[19:19]),
	.out(wire_sft87a_out[19:19]));
	soft   sft87a_20
	( 
	.in(wire_sft87a_in[20:20]),
	.out(wire_sft87a_out[20:20]));
	soft   sft87a_21
	( 
	.in(wire_sft87a_in[21:21]),
	.out(wire_sft87a_out[21:21]));
	soft   sft87a_22
	( 
	.in(wire_sft87a_in[22:22]),
	.out(wire_sft87a_out[22:22]));
	soft   sft87a_23
	( 
	.in(wire_sft87a_in[23:23]),
	.out(wire_sft87a_out[23:23]));
	soft   sft87a_24
	( 
	.in(wire_sft87a_in[24:24]),
	.out(wire_sft87a_out[24:24]));
	soft   sft87a_25
	( 
	.in(wire_sft87a_in[25:25]),
	.out(wire_sft87a_out[25:25]));
	soft   sft87a_26
	( 
	.in(wire_sft87a_in[26:26]),
	.out(wire_sft87a_out[26:26]));
	soft   sft87a_27
	( 
	.in(wire_sft87a_in[27:27]),
	.out(wire_sft87a_out[27:27]));
	soft   sft87a_28
	( 
	.in(wire_sft87a_in[28:28]),
	.out(wire_sft87a_out[28:28]));
	soft   sft87a_29
	( 
	.in(wire_sft87a_in[29:29]),
	.out(wire_sft87a_out[29:29]));
	soft   sft87a_30
	( 
	.in(wire_sft87a_in[30:30]),
	.out(wire_sft87a_out[30:30]));
	assign
		wire_sft87a_in = {w687w, {dffe81, {dffe80, {dffe79, {dffe78, {dffe77, {dffe75, {dffe73, {dffe71, {dffe69, {dffe67, {dffe65, {dffe63, {dffe61, {dffe59, {dffe57, {dffe55, {dffe53, {dffe51, {dffe49, {dffe47, {dffe45, {dffe43, {dffe41, {dffe39, {dffe37, {dffe35, {dffe33, {dffe31, {dffe29, dffe27}}}}}}}}}}}}}}}}}}}}}}}}}}}}}};
	soft   sft88a_0
	( 
	.in(wire_sft88a_in[0:0]),
	.out(wire_sft88a_out[0:0]));
	soft   sft88a_1
	( 
	.in(wire_sft88a_in[1:1]),
	.out(wire_sft88a_out[1:1]));
	soft   sft88a_2
	( 
	.in(wire_sft88a_in[2:2]),
	.out(wire_sft88a_out[2:2]));
	soft   sft88a_3
	( 
	.in(wire_sft88a_in[3:3]),
	.out(wire_sft88a_out[3:3]));
	soft   sft88a_4
	( 
	.in(wire_sft88a_in[4:4]),
	.out(wire_sft88a_out[4:4]));
	soft   sft88a_5
	( 
	.in(wire_sft88a_in[5:5]),
	.out(wire_sft88a_out[5:5]));
	soft   sft88a_6
	( 
	.in(wire_sft88a_in[6:6]),
	.out(wire_sft88a_out[6:6]));
	soft   sft88a_7
	( 
	.in(wire_sft88a_in[7:7]),
	.out(wire_sft88a_out[7:7]));
	soft   sft88a_8
	( 
	.in(wire_sft88a_in[8:8]),
	.out(wire_sft88a_out[8:8]));
	soft   sft88a_9
	( 
	.in(wire_sft88a_in[9:9]),
	.out(wire_sft88a_out[9:9]));
	soft   sft88a_10
	( 
	.in(wire_sft88a_in[10:10]),
	.out(wire_sft88a_out[10:10]));
	soft   sft88a_11
	( 
	.in(wire_sft88a_in[11:11]),
	.out(wire_sft88a_out[11:11]));
	soft   sft88a_12
	( 
	.in(wire_sft88a_in[12:12]),
	.out(wire_sft88a_out[12:12]));
	soft   sft88a_13
	( 
	.in(wire_sft88a_in[13:13]),
	.out(wire_sft88a_out[13:13]));
	soft   sft88a_14
	( 
	.in(wire_sft88a_in[14:14]),
	.out(wire_sft88a_out[14:14]));
	soft   sft88a_15
	( 
	.in(wire_sft88a_in[15:15]),
	.out(wire_sft88a_out[15:15]));
	soft   sft88a_16
	( 
	.in(wire_sft88a_in[16:16]),
	.out(wire_sft88a_out[16:16]));
	soft   sft88a_17
	( 
	.in(wire_sft88a_in[17:17]),
	.out(wire_sft88a_out[17:17]));
	soft   sft88a_18
	( 
	.in(wire_sft88a_in[18:18]),
	.out(wire_sft88a_out[18:18]));
	soft   sft88a_19
	( 
	.in(wire_sft88a_in[19:19]),
	.out(wire_sft88a_out[19:19]));
	soft   sft88a_20
	( 
	.in(wire_sft88a_in[20:20]),
	.out(wire_sft88a_out[20:20]));
	soft   sft88a_21
	( 
	.in(wire_sft88a_in[21:21]),
	.out(wire_sft88a_out[21:21]));
	soft   sft88a_22
	( 
	.in(wire_sft88a_in[22:22]),
	.out(wire_sft88a_out[22:22]));
	soft   sft88a_23
	( 
	.in(wire_sft88a_in[23:23]),
	.out(wire_sft88a_out[23:23]));
	soft   sft88a_24
	( 
	.in(wire_sft88a_in[24:24]),
	.out(wire_sft88a_out[24:24]));
	soft   sft88a_25
	( 
	.in(wire_sft88a_in[25:25]),
	.out(wire_sft88a_out[25:25]));
	soft   sft88a_26
	( 
	.in(wire_sft88a_in[26:26]),
	.out(wire_sft88a_out[26:26]));
	soft   sft88a_27
	( 
	.in(wire_sft88a_in[27:27]),
	.out(wire_sft88a_out[27:27]));
	soft   sft88a_28
	( 
	.in(wire_sft88a_in[28:28]),
	.out(wire_sft88a_out[28:28]));
	soft   sft88a_29
	( 
	.in(wire_sft88a_in[29:29]),
	.out(wire_sft88a_out[29:29]));
	soft   sft88a_30
	( 
	.in(wire_sft88a_in[30:30]),
	.out(wire_sft88a_out[30:30]));
	assign
		wire_sft88a_in = {w687w, {w687w, {w687w, {w687w, {w687w, {w687w, {dffe76, {dffe74, {dffe72, {dffe70, {dffe68, {dffe66, {dffe64, {dffe62, {dffe60, {dffe58, {dffe56, {dffe54, {dffe52, {dffe50, {dffe48, {dffe46, {dffe44, {dffe42, {dffe40, {dffe38, {dffe36, {dffe34, {dffe32, {dffe30, dffe28}}}}}}}}}}}}}}}}}}}}}}}}}}}}}};
	soft   sft89a_0
	( 
	.in(wire_sft89a_in[0:0]),
	.out(wire_sft89a_out[0:0]));
	soft   sft89a_1
	( 
	.in(wire_sft89a_in[1:1]),
	.out(wire_sft89a_out[1:1]));
	soft   sft89a_2
	( 
	.in(wire_sft89a_in[2:2]),
	.out(wire_sft89a_out[2:2]));
	soft   sft89a_3
	( 
	.in(wire_sft89a_in[3:3]),
	.out(wire_sft89a_out[3:3]));
	soft   sft89a_4
	( 
	.in(wire_sft89a_in[4:4]),
	.out(wire_sft89a_out[4:4]));
	soft   sft89a_5
	( 
	.in(wire_sft89a_in[5:5]),
	.out(wire_sft89a_out[5:5]));
	soft   sft89a_6
	( 
	.in(wire_sft89a_in[6:6]),
	.out(wire_sft89a_out[6:6]));
	soft   sft89a_7
	( 
	.in(wire_sft89a_in[7:7]),
	.out(wire_sft89a_out[7:7]));
	soft   sft89a_8
	( 
	.in(wire_sft89a_in[8:8]),
	.out(wire_sft89a_out[8:8]));
	soft   sft89a_9
	( 
	.in(wire_sft89a_in[9:9]),
	.out(wire_sft89a_out[9:9]));
	soft   sft89a_10
	( 
	.in(wire_sft89a_in[10:10]),
	.out(wire_sft89a_out[10:10]));
	soft   sft89a_11
	( 
	.in(wire_sft89a_in[11:11]),
	.out(wire_sft89a_out[11:11]));
	soft   sft89a_12
	( 
	.in(wire_sft89a_in[12:12]),
	.out(wire_sft89a_out[12:12]));
	soft   sft89a_13
	( 
	.in(wire_sft89a_in[13:13]),
	.out(wire_sft89a_out[13:13]));
	soft   sft89a_14
	( 
	.in(wire_sft89a_in[14:14]),
	.out(wire_sft89a_out[14:14]));
	soft   sft89a_15
	( 
	.in(wire_sft89a_in[15:15]),
	.out(wire_sft89a_out[15:15]));
	soft   sft89a_16
	( 
	.in(wire_sft89a_in[16:16]),
	.out(wire_sft89a_out[16:16]));
	soft   sft89a_17
	( 
	.in(wire_sft89a_in[17:17]),
	.out(wire_sft89a_out[17:17]));
	soft   sft89a_18
	( 
	.in(wire_sft89a_in[18:18]),
	.out(wire_sft89a_out[18:18]));
	soft   sft89a_19
	( 
	.in(wire_sft89a_in[19:19]),
	.out(wire_sft89a_out[19:19]));
	soft   sft89a_20
	( 
	.in(wire_sft89a_in[20:20]),
	.out(wire_sft89a_out[20:20]));
	soft   sft89a_21
	( 
	.in(wire_sft89a_in[21:21]),
	.out(wire_sft89a_out[21:21]));
	soft   sft89a_22
	( 
	.in(wire_sft89a_in[22:22]),
	.out(wire_sft89a_out[22:22]));
	soft   sft89a_23
	( 
	.in(wire_sft89a_in[23:23]),
	.out(wire_sft89a_out[23:23]));
	soft   sft89a_24
	( 
	.in(wire_sft89a_in[24:24]),
	.out(wire_sft89a_out[24:24]));
	soft   sft89a_25
	( 
	.in(wire_sft89a_in[25:25]),
	.out(wire_sft89a_out[25:25]));
	soft   sft89a_26
	( 
	.in(wire_sft89a_in[26:26]),
	.out(wire_sft89a_out[26:26]));
	soft   sft89a_27
	( 
	.in(wire_sft89a_in[27:27]),
	.out(wire_sft89a_out[27:27]));
	soft   sft89a_28
	( 
	.in(wire_sft89a_in[28:28]),
	.out(wire_sft89a_out[28:28]));
	soft   sft89a_29
	( 
	.in(wire_sft89a_in[29:29]),
	.out(wire_sft89a_out[29:29]));
	soft   sft89a_30
	( 
	.in(wire_sft89a_in[30:30]),
	.out(wire_sft89a_out[30:30]));
	assign
		wire_sft89a_in = wire_add86_result;
	assign
		result = w854w[47:0],
		w687w = 1'b0,
		w854w = {wire_sft89a_out[30:29], wire_sft89a_out[28:27], wire_sft89a_out[26:25], wire_sft89a_out[24:23], wire_sft89a_out[22:21], wire_sft89a_out[20:19], wire_sft89a_out[18:17], wire_sft89a_out[16:15], wire_sft89a_out[14:13], wire_sft89a_out[12:11], wire_sft89a_out[10:9], wire_sft89a_out[8:7], wire_sft89a_out[6:5], wire_sft89a_out[4:3], wire_sft89a_out[2:1], wire_sft89a_out[0], dffe26, dffe25, dffe24, dffe23, dffe22, dffe21, dffe20, dffe19, dffe18, dffe17, dffe16, dffe15, dffe14, dffe13, dffe12, dffe11, dffe10, dffe9};
endmodule //FP_Mult_mult

//synthesis_resources = dsp_9bit 7 lut 111 reg 209 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  FP_Mult_altfp_mult
	( 
	aclr,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   [31:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	dataa_exp_all_one_ff_p1;
	reg	dataa_exp_not_zero_ff_p1;
	reg	dataa_man_not_zero_ff_p1;
	reg	dataa_man_not_zero_ff_p2;
	reg	datab_exp_all_one_ff_p1;
	reg	datab_exp_not_zero_ff_p1;
	reg	datab_man_not_zero_ff_p1;
	reg	datab_man_not_zero_ff_p2;
	reg	[9:0]	delay_exp2_bias;
	reg	[9:0]	delay_exp_bias;
	reg	delay_man_product_msb;
	reg	delay_man_product_msb_p0;
	reg	[8:0]	exp_add_p1;
	reg	[7:0]	exp_result_ff;
	reg	input_is_infinity_dffe_0;
	reg	input_is_infinity_dffe_1;
	reg	input_is_infinity_ff1;
	reg	input_is_nan_dffe_0;
	reg	input_is_nan_dffe_1;
	reg	input_is_nan_ff1;
	reg	input_not_zero_dffe_0;
	reg	input_not_zero_dffe_1;
	reg	input_not_zero_ff1;
	reg	lsb_dffe;
	reg	[22:0]	man_result_ff;
	reg	[23:0]	man_round_p;
	reg	[24:0]	man_round_p2;
	reg	round_dffe;
	reg	[0:0]	sign_node_ff0;
	reg	[0:0]	sign_node_ff1;
	reg	[0:0]	sign_node_ff2;
	reg	[0:0]	sign_node_ff3;
	reg	[0:0]	sign_node_ff4;
	reg	sticky_dffe;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[8:0]	wire_exp_add_adder_pipeline_dffe_Q;
	wire	[8:0]	wire_exp_add_adder_pipeline_dffe_D;
	wire	[9:0]	wire_exp_add_adder_result_int;
	wire	wire_exp_add_adder_aclr;
	wire	wire_exp_add_adder_cin;
	wire	wire_exp_add_adder_clken;
	wire	wire_exp_add_adder_clock;
	wire	[8:0]	wire_exp_add_adder_dataa;
	wire	[8:0]	wire_exp_add_adder_datab;
	wire	[8:0]	wire_exp_add_adder_result;
	wire	[10:0]	wire_exp_adj_adder_result_int;
	wire	wire_exp_adj_adder_cin;
	wire	[9:0]	wire_exp_adj_adder_dataa;
	wire	[9:0]	wire_exp_adj_adder_datab;
	wire	[9:0]	wire_exp_adj_adder_result;
	wire	[9:0]	wire_exp_bias_subtr_dataa;
	wire	[9:0]	wire_exp_bias_subtr_datab;
	wire	[9:0]	wire_exp_bias_subtr_result;
	wire	[24:0]	wire_man_round_adder_dataa;
	wire	[24:0]	wire_man_round_adder_datab;
	wire	[24:0]	wire_man_round_adder_result;
	wire  [47:0]   wire_man_product2_mult_result;
	wire  [9:0]  bias;
	wire clk_en;
	wire  [7:0]  dataa_exp_all_one;
	wire  [7:0]  dataa_exp_not_zero;
	wire  [22:0]  dataa_man_not_zero;
	wire  [7:0]  datab_exp_all_one;
	wire  [7:0]  datab_exp_not_zero;
	wire  [22:0]  datab_man_not_zero;
	wire  exp_is_inf;
	wire  exp_is_zero;
	wire  [9:0]  expmod;
	wire  [7:0]  inf_num;
	wire  lsb_bit;
	wire  [23:0]  man_result_round;
	wire  [24:0]  man_shift_full;
	wire  [7:0]  result_exp_all_one;
	wire  [8:0]  result_exp_not_zero;
	wire  round_bit;
	wire  round_carry;
	wire  [22:0]  sticky_bit;

	// synopsys translate_off
	initial
		dataa_exp_all_one_ff_p1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dataa_exp_all_one_ff_p1 <= 1'b0;
		else if  (clk_en == 1'b1)   dataa_exp_all_one_ff_p1 <= dataa_exp_all_one[7];
	// synopsys translate_off
	initial
		dataa_exp_not_zero_ff_p1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dataa_exp_not_zero_ff_p1 <= 1'b0;
		else if  (clk_en == 1'b1)   dataa_exp_not_zero_ff_p1 <= dataa_exp_not_zero[7];
	// synopsys translate_off
	initial
		dataa_man_not_zero_ff_p1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dataa_man_not_zero_ff_p1 <= 1'b0;
		else if  (clk_en == 1'b1)   dataa_man_not_zero_ff_p1 <= dataa_man_not_zero[10];
	// synopsys translate_off
	initial
		dataa_man_not_zero_ff_p2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dataa_man_not_zero_ff_p2 <= 1'b0;
		else if  (clk_en == 1'b1)   dataa_man_not_zero_ff_p2 <= dataa_man_not_zero[22];
	// synopsys translate_off
	initial
		datab_exp_all_one_ff_p1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) datab_exp_all_one_ff_p1 <= 1'b0;
		else if  (clk_en == 1'b1)   datab_exp_all_one_ff_p1 <= datab_exp_all_one[7];
	// synopsys translate_off
	initial
		datab_exp_not_zero_ff_p1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) datab_exp_not_zero_ff_p1 <= 1'b0;
		else if  (clk_en == 1'b1)   datab_exp_not_zero_ff_p1 <= datab_exp_not_zero[7];
	// synopsys translate_off
	initial
		datab_man_not_zero_ff_p1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) datab_man_not_zero_ff_p1 <= 1'b0;
		else if  (clk_en == 1'b1)   datab_man_not_zero_ff_p1 <= datab_man_not_zero[10];
	// synopsys translate_off
	initial
		datab_man_not_zero_ff_p2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) datab_man_not_zero_ff_p2 <= 1'b0;
		else if  (clk_en == 1'b1)   datab_man_not_zero_ff_p2 <= datab_man_not_zero[22];
	// synopsys translate_off
	initial
		delay_exp2_bias = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) delay_exp2_bias <= 10'b0;
		else if  (clk_en == 1'b1)   delay_exp2_bias <= delay_exp_bias;
	// synopsys translate_off
	initial
		delay_exp_bias = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) delay_exp_bias <= 10'b0;
		else if  (clk_en == 1'b1)   delay_exp_bias <= wire_exp_bias_subtr_result;
	// synopsys translate_off
	initial
		delay_man_product_msb = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) delay_man_product_msb <= 1'b0;
		else if  (clk_en == 1'b1)   delay_man_product_msb <= delay_man_product_msb_p0;
	// synopsys translate_off
	initial
		delay_man_product_msb_p0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) delay_man_product_msb_p0 <= 1'b0;
		else if  (clk_en == 1'b1)   delay_man_product_msb_p0 <= wire_man_product2_mult_result[47];
	// synopsys translate_off
	initial
		exp_add_p1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_add_p1 <= 9'b0;
		else if  (clk_en == 1'b1)   exp_add_p1 <= wire_exp_add_adder_result;
	// synopsys translate_off
	initial
		exp_result_ff = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_result_ff <= 8'b0;
		else if  (clk_en == 1'b1)   exp_result_ff <= ((inf_num & {8{((exp_is_inf | input_is_infinity_ff1) | input_is_nan_ff1)}}) | ((wire_exp_adj_adder_result[7:0] & {8{(~ exp_is_zero)}}) & {8{input_not_zero_ff1}}));
	// synopsys translate_off
	initial
		input_is_infinity_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinity_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinity_dffe_0 <= ((dataa_exp_all_one_ff_p1 & (~ (dataa_man_not_zero_ff_p1 | dataa_man_not_zero_ff_p2))) | (datab_exp_all_one_ff_p1 & (~ (datab_man_not_zero_ff_p1 | datab_man_not_zero_ff_p2))));
	// synopsys translate_off
	initial
		input_is_infinity_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinity_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinity_dffe_1 <= input_is_infinity_dffe_0;
	// synopsys translate_off
	initial
		input_is_infinity_ff1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinity_ff1 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinity_ff1 <= input_is_infinity_dffe_1;
	// synopsys translate_off
	initial
		input_is_nan_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe_0 <= ((dataa_exp_all_one_ff_p1 & (dataa_man_not_zero_ff_p1 | dataa_man_not_zero_ff_p2)) | (datab_exp_all_one_ff_p1 & (datab_man_not_zero_ff_p1 | datab_man_not_zero_ff_p2)));
	// synopsys translate_off
	initial
		input_is_nan_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe_1 <= input_is_nan_dffe_0;
	// synopsys translate_off
	initial
		input_is_nan_ff1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_ff1 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_ff1 <= input_is_nan_dffe_1;
	// synopsys translate_off
	initial
		input_not_zero_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_not_zero_dffe_0 <= 1'b0;
		else if  (clk_en == 1'b1)   input_not_zero_dffe_0 <= (dataa_exp_not_zero_ff_p1 & datab_exp_not_zero_ff_p1);
	// synopsys translate_off
	initial
		input_not_zero_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_not_zero_dffe_1 <= 1'b0;
		else if  (clk_en == 1'b1)   input_not_zero_dffe_1 <= input_not_zero_dffe_0;
	// synopsys translate_off
	initial
		input_not_zero_ff1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_not_zero_ff1 <= 1'b0;
		else if  (clk_en == 1'b1)   input_not_zero_ff1 <= input_not_zero_dffe_1;
	// synopsys translate_off
	initial
		lsb_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lsb_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   lsb_dffe <= lsb_bit;
	// synopsys translate_off
	initial
		man_result_ff = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_result_ff <= 23'b0;
		else if  (clk_en == 1'b1)   man_result_ff <= {((((((man_result_round[22] & input_not_zero_ff1) & (~ input_is_infinity_ff1)) & (~ exp_is_inf)) & (~ exp_is_zero)) | (input_is_infinity_ff1 & (~ input_not_zero_ff1))) | input_is_nan_ff1), (((((man_result_round[21:0] & {22{input_not_zero_ff1}}) & {22{(~ input_is_infinity_ff1)}}) & {22{(~ exp_is_inf)}}) & {22{(~ exp_is_zero)}}) & {22{(~ input_is_nan_ff1)}})};
	// synopsys translate_off
	initial
		man_round_p = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_round_p <= 24'b0;
		else if  (clk_en == 1'b1)   man_round_p <= man_shift_full[24:1];
	// synopsys translate_off
	initial
		man_round_p2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_round_p2 <= 25'b0;
		else if  (clk_en == 1'b1)   man_round_p2 <= wire_man_round_adder_result;
	// synopsys translate_off
	initial
		round_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) round_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   round_dffe <= round_bit;
	// synopsys translate_off
	initial
		sign_node_ff0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_node_ff0 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_node_ff0 <= (dataa[31] ^ datab[31]);
	// synopsys translate_off
	initial
		sign_node_ff1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_node_ff1 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_node_ff1 <= sign_node_ff0[0:0];
	// synopsys translate_off
	initial
		sign_node_ff2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_node_ff2 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_node_ff2 <= sign_node_ff1[0:0];
	// synopsys translate_off
	initial
		sign_node_ff3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_node_ff3 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_node_ff3 <= sign_node_ff2[0:0];
	// synopsys translate_off
	initial
		sign_node_ff4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_node_ff4 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_node_ff4 <= sign_node_ff3[0:0];
	// synopsys translate_off
	initial
		sticky_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_dffe <= sticky_bit[22];
	assign
		wire_exp_add_adder_result_int = {wire_exp_add_adder_dataa, wire_exp_add_adder_cin} + {wire_exp_add_adder_datab, wire_exp_add_adder_cin};
	//synopsys translate_off
	initial
		wire_exp_add_adder_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_exp_add_adder_clock or posedge wire_exp_add_adder_aclr)
		if (wire_exp_add_adder_aclr == 1'b1) wire_exp_add_adder_pipeline_dffe_Q <= 9'b0;
		else if (wire_exp_add_adder_clken == 1'b1) wire_exp_add_adder_pipeline_dffe_Q <= wire_exp_add_adder_pipeline_dffe_D;
	assign
		wire_exp_add_adder_result = wire_exp_add_adder_pipeline_dffe_Q[8:0],
		wire_exp_add_adder_pipeline_dffe_D[8:0] = wire_exp_add_adder_result_int[9:1];
	assign
		wire_exp_add_adder_aclr = aclr,
		wire_exp_add_adder_cin = 1'b0,
		wire_exp_add_adder_clken = clk_en,
		wire_exp_add_adder_clock = clock,
		wire_exp_add_adder_dataa = {1'b0, dataa[30:23]},
		wire_exp_add_adder_datab = {1'b0, datab[30:23]};
	assign
		wire_exp_adj_adder_result_int = {wire_exp_adj_adder_dataa, wire_exp_adj_adder_cin} + {wire_exp_adj_adder_datab, wire_exp_adj_adder_cin};
	assign
		wire_exp_adj_adder_result = wire_exp_adj_adder_result_int[10:1];
	assign
		wire_exp_adj_adder_cin = 1'b0,
		wire_exp_adj_adder_dataa = delay_exp2_bias,
		wire_exp_adj_adder_datab = expmod;
	assign
		wire_exp_bias_subtr_result = wire_exp_bias_subtr_dataa - wire_exp_bias_subtr_datab;
	assign
		wire_exp_bias_subtr_dataa = {1'b0, exp_add_p1[8:0]},
		wire_exp_bias_subtr_datab = {bias[9:0]};
	assign
		wire_man_round_adder_result = wire_man_round_adder_dataa + wire_man_round_adder_datab;
	assign
		wire_man_round_adder_dataa = {1'b0, man_round_p},
		wire_man_round_adder_datab = {{24{1'b0}}, round_carry};
	FP_Mult_mult   man_product2_mult
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa({1'b1, dataa[22:0]}),
	.datab({1'b1, datab[22:0]}),
	.result(wire_man_product2_mult_result));
	assign
		bias = {{3{1'b0}}, {7{1'b1}}},
		clk_en = 1'b1,
		dataa_exp_all_one = {(dataa[30] & dataa_exp_all_one[6]), (dataa[29] & dataa_exp_all_one[5]), (dataa[28] & dataa_exp_all_one[4]), (dataa[27] & dataa_exp_all_one[3]), (dataa[26] & dataa_exp_all_one[2]), (dataa[25] & dataa_exp_all_one[1]), (dataa[24] & dataa_exp_all_one[0]), dataa[23]},
		dataa_exp_not_zero = {(dataa[30] | dataa_exp_not_zero[6]), (dataa[29] | dataa_exp_not_zero[5]), (dataa[28] | dataa_exp_not_zero[4]), (dataa[27] | dataa_exp_not_zero[3]), (dataa[26] | dataa_exp_not_zero[2]), (dataa[25] | dataa_exp_not_zero[1]), (dataa[24] | dataa_exp_not_zero[0]), dataa[23]},
		dataa_man_not_zero = {(dataa[22] | dataa_man_not_zero[21]), (dataa[21] | dataa_man_not_zero[20]), (dataa[20] | dataa_man_not_zero[19]), (dataa[19] | dataa_man_not_zero[18]), (dataa[18] | dataa_man_not_zero[17]), (dataa[17] | dataa_man_not_zero[16]), (dataa[16] | dataa_man_not_zero[15]), (dataa[15] | dataa_man_not_zero[14]), (dataa[14] | dataa_man_not_zero[13]), (dataa[13] | dataa_man_not_zero[12]), (dataa[12] | dataa_man_not_zero[11]), dataa[11], (dataa[10] | dataa_man_not_zero[9]), (dataa[9] | dataa_man_not_zero[8]), (dataa[8] | dataa_man_not_zero[7]), (dataa[7] | dataa_man_not_zero[6]), (dataa[6] | dataa_man_not_zero[5]), (dataa[5] | dataa_man_not_zero[4]), (dataa[4] | dataa_man_not_zero[3]), (dataa[3] | dataa_man_not_zero[2]), (dataa[2] | dataa_man_not_zero[1]), (dataa[1] | dataa_man_not_zero[0]), dataa[0]},
		datab_exp_all_one = {(datab[30] & datab_exp_all_one[6]), (datab[29] & datab_exp_all_one[5]), (datab[28] & datab_exp_all_one[4]), (datab[27] & datab_exp_all_one[3]), (datab[26] & datab_exp_all_one[2]), (datab[25] & datab_exp_all_one[1]), (datab[24] & datab_exp_all_one[0]), datab[23]},
		datab_exp_not_zero = {(datab[30] | datab_exp_not_zero[6]), (datab[29] | datab_exp_not_zero[5]), (datab[28] | datab_exp_not_zero[4]), (datab[27] | datab_exp_not_zero[3]), (datab[26] | datab_exp_not_zero[2]), (datab[25] | datab_exp_not_zero[1]), (datab[24] | datab_exp_not_zero[0]), datab[23]},
		datab_man_not_zero = {(datab[22] | datab_man_not_zero[21]), (datab[21] | datab_man_not_zero[20]), (datab[20] | datab_man_not_zero[19]), (datab[19] | datab_man_not_zero[18]), (datab[18] | datab_man_not_zero[17]), (datab[17] | datab_man_not_zero[16]), (datab[16] | datab_man_not_zero[15]), (datab[15] | datab_man_not_zero[14]), (datab[14] | datab_man_not_zero[13]), (datab[13] | datab_man_not_zero[12]), (datab[12] | datab_man_not_zero[11]), datab[11], (datab[10] | datab_man_not_zero[9]), (datab[9] | datab_man_not_zero[8]), (datab[8] | datab_man_not_zero[7]), (datab[7] | datab_man_not_zero[6]), (datab[6] | datab_man_not_zero[5]), (datab[5] | datab_man_not_zero[4]), (datab[4] | datab_man_not_zero[3]), (datab[3] | datab_man_not_zero[2]), (datab[2] | datab_man_not_zero[1]), (datab[1] | datab_man_not_zero[0]), datab[0]},
		exp_is_inf = (((~ wire_exp_adj_adder_result[9]) & wire_exp_adj_adder_result[8]) | ((~ wire_exp_adj_adder_result[8]) & result_exp_all_one[7])),
		exp_is_zero = (wire_exp_adj_adder_result[9] | (~ result_exp_not_zero[8])),
		expmod = {{8{1'b0}}, (delay_man_product_msb & man_round_p2[24]), (delay_man_product_msb ^ man_round_p2[24])},
		inf_num = {8{1'b1}},
		lsb_bit = man_shift_full[1],
		man_result_round = ((man_round_p2[23:0] & {24{(~ man_round_p2[24])}}) | (man_round_p2[24:1] & {24{man_round_p2[24]}})),
		man_shift_full = ((wire_man_product2_mult_result[46:22] & {25{(~ wire_man_product2_mult_result[47])}}) | (wire_man_product2_mult_result[47:23] & {25{wire_man_product2_mult_result[47]}})),
		result = {sign_node_ff4[0:0], exp_result_ff[7:0], man_result_ff[22:0]},
		result_exp_all_one = {(result_exp_all_one[6] & wire_exp_adj_adder_result[7]), (result_exp_all_one[5] & wire_exp_adj_adder_result[6]), (result_exp_all_one[4] & wire_exp_adj_adder_result[5]), (result_exp_all_one[3] & wire_exp_adj_adder_result[4]), (result_exp_all_one[2] & wire_exp_adj_adder_result[3]), (result_exp_all_one[1] & wire_exp_adj_adder_result[2]), (result_exp_all_one[0] & wire_exp_adj_adder_result[1]), wire_exp_adj_adder_result[0]},
		result_exp_not_zero = {(result_exp_not_zero[7] | wire_exp_adj_adder_result[8]), (result_exp_not_zero[6] | wire_exp_adj_adder_result[7]), (result_exp_not_zero[5] | wire_exp_adj_adder_result[6]), (result_exp_not_zero[4] | wire_exp_adj_adder_result[5]), (result_exp_not_zero[3] | wire_exp_adj_adder_result[4]), (result_exp_not_zero[2] | wire_exp_adj_adder_result[3]), (result_exp_not_zero[1] | wire_exp_adj_adder_result[2]), (result_exp_not_zero[0] | wire_exp_adj_adder_result[1]), wire_exp_adj_adder_result[0]},
		round_bit = man_shift_full[0],
		round_carry = (round_dffe & (lsb_dffe | sticky_dffe)),
		sticky_bit = {(sticky_bit[21] | (wire_man_product2_mult_result[47] & wire_man_product2_mult_result[22])), (sticky_bit[20] | wire_man_product2_mult_result[21]), (sticky_bit[19] | wire_man_product2_mult_result[20]), (sticky_bit[18] | wire_man_product2_mult_result[19]), (sticky_bit[17] | wire_man_product2_mult_result[18]), (sticky_bit[16] | wire_man_product2_mult_result[17]), (sticky_bit[15] | wire_man_product2_mult_result[16]), (sticky_bit[14] | wire_man_product2_mult_result[15]), (sticky_bit[13] | wire_man_product2_mult_result[14]), (sticky_bit[12] | wire_man_product2_mult_result[13]), (sticky_bit[11] | wire_man_product2_mult_result[12]), (sticky_bit[10] | wire_man_product2_mult_result[11]), (sticky_bit[9] | wire_man_product2_mult_result[10]), (sticky_bit[8] | wire_man_product2_mult_result[9]), (sticky_bit[7] | wire_man_product2_mult_result[8]), (sticky_bit[6] | wire_man_product2_mult_result[7]), (sticky_bit[5] | wire_man_product2_mult_result[6]), (sticky_bit[4] | wire_man_product2_mult_result[5]), (sticky_bit[3] | wire_man_product2_mult_result[4]), (sticky_bit[2] | wire_man_product2_mult_result[3]), (sticky_bit[1] | wire_man_product2_mult_result[2]), (sticky_bit[0] | wire_man_product2_mult_result[1]), wire_man_product2_mult_result[0]};
endmodule //FP_Mult_altfp_mult
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module FP_Mult (
	aclr,
	clock,
	dataa,
	datab,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	  clock;
	input	[31:0]  dataa;
	input	[31:0]  datab;
	output	[31:0]  result;

	wire [31:0] sub_wire0;
	wire [31:0] result = sub_wire0[31:0];

	FP_Mult_altfp_mult	FP_Mult_altfp_mult_component (
				.aclr (aclr),
				.clock (clock),
				.dataa (dataa),
				.datab (datab),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: PRIVATE: FPM_FORMAT STRING "Single"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV GX"
// Retrieval info: CONSTANT: DEDICATED_MULTIPLIER_CIRCUITRY STRING "YES"
// Retrieval info: CONSTANT: DENORMAL_SUPPORT STRING "NO"
// Retrieval info: CONSTANT: EXCEPTION_HANDLING STRING "NO"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_HINT STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "altfp_mult"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "5"
// Retrieval info: CONSTANT: REDUCED_FUNCTIONALITY STRING "NO"
// Retrieval info: CONSTANT: ROUNDING STRING "TO_NEAREST"
// Retrieval info: CONSTANT: WIDTH_EXP NUMERIC "8"
// Retrieval info: CONSTANT: WIDTH_MAN NUMERIC "23"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT NODEFVAL "aclr"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: USED_PORT: dataa 0 0 32 0 INPUT NODEFVAL "dataa[31..0]"
// Retrieval info: CONNECT: @dataa 0 0 32 0 dataa 0 0 32 0
// Retrieval info: USED_PORT: datab 0 0 32 0 INPUT NODEFVAL "datab[31..0]"
// Retrieval info: CONNECT: @datab 0 0 32 0 datab 0 0 32 0
// Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
// Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
// Retrieval info: GEN_FILE: TYPE_NORMAL FP_Mult.v TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL FP_Mult.qip TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL FP_Mult.bsf TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL FP_Mult_inst.v TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL FP_Mult_bb.v TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL FP_Mult.inc TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL FP_Mult.cmp TRUE TRUE
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX NUMERIC "1"
// Retrieval info: LIB_FILE: lpm
